---- config
# Basic config options.
title: Migrating Plugins to Rails 3
indent: 5
height: 25
width: 72
skip: 0

# The following options are for Gvim usage.
vim: gvim
gvimrc: |
  set guifont=Droid\ Sans\ Mono\ 20
  colorscheme default
  set nonumber

---- center
Migrating Plugins to Rails 3
or, A Tale of Woe

by Clinton R. Nixon
Viget Labs

----
== Projects used for examples

* Formtastic
* Typus
* rails_console

----
== First, the easy stuff

* Rake tasks
* Generators
* RAILS_* constants

----
== Rake tasks

Putting *.rake files in tasks/ has been deprecated.

Rake tasks go in lib/tasks/ now.

----
== Rake tasks and Railties

Rake tasks can also now be moved into a Railtie:

---- ruby,i4

module Typus
  class Railtie < ::Rails::Railtie
    rake_tasks do
      namespace :typus do
        desc "Install acts_as_list, acts_as_tree and paperclip."
        task :misc do
          # ...
        end
      end
    end
  end
end

----
== Generators

Like tasks, generators have moved from generators/ to lib/generators/.
+
Big changes:

* Rails 2: Rubigen
* Rails 3: Thor
+
Thor's Rails::Generators::Base replicates a lot of the old Rubigen
Rails::Generator::Base API.

---- ruby

# Rails 2 generator

class FormtasticGenerator < Rails::Generator::Base
  def manifest
    record do |m|
      m.directory File.join('config', 'initializers')
      m.template 'formtastic.rb',   
        File.join('config', 'initializers', 'formtastic.rb')
      m.directory File.join('public', 'stylesheets')
      m.template 'formtastic.css',   
        File.join('public', 'stylesheets', 'formtastic.css')
      m.template 'formtastic_changes.css',   
        File.join('public', 'stylesheets', 'formtastic_changes.css')
    end
  end
end

---- ruby

# Rails 3 generator

require 'rails/generators'

class FormtasticGenerator < Rails::Generators::Base
  def install_formtastic
    template File.join('config', 'initializers', 'formtastic.rb')
    template File.join('public', 'stylesheets', 'formtastic.css')
    template File.join('public', 'stylesheets', 'formtastic_changes.css')
  end
end

---- ruby

# Rails 2 generator with name and options

class FormGenerator < Rails::Generator::NamedBase
  default_options :haml => false,
                  :partial => false

  def initialize(runtime_args, runtime_options = {})
    base_name, @controller_class_path = extract_modules(@name.pluralize)
    # ...
  end

  def manifest
    record do |m|
      if options[:partial]
        # ...
      end
    end
  end
end

---- ruby

# Rails 3 generator with name and options

class FormGenerator < Rails::Generators::NamedBase
  class_option :haml, :type => :boolean, 
    :desc => 'Generate HAML instead of ERB.'
  class_option :partial, :type => :boolean, 
    :desc => 'Generate a form partial in the model views path, i.e. "_form.html.erb" or _form.html.haml".'
  class_option :controller, :type => :string, :banner => 'PATH', 
    :desc => 'Generate for custom controller/view path - in case model and controller namespace is different, i.e. "admin/posts".'

  def create_form 
    base_name, controller_class_path = extract_modules(name.pluralize)

    if options[:partial]
      # ... 
    end
  end
end

----

== RAILS_*

All the RAILS_* constants are now deprecated. 

Move to using the Rails object:

  * Rails.env
  * Rails.root

----

== Plugging in to Rails 3

---- ruby
# The Rails 2 way

ActionView::Base.send :include, Formtastic::SemanticFormHelper
ActionView::Base.send :include, Formtastic::LayoutHelper
+
# The Rails 3 way

ActiveSupport.on_load(:action_view) do
  include Formtastic::SemanticFormHelper
  include Formtastic::LayoutHelper
end

---- 

== ActiveSupport hooks

* before_configuration
* before_initialize
* before_eager_load
* after_initialize

* All the base classes: 
  * active_record
  * action_controller
  * action_view
  * action_mailer
  * i18n

You can execute whatever code you need to inside these.
The code will be executed in the context of ActiveWhatever::Base 
for the base classes.

----

== So that was the easy stuff.
+
== Now, for the rest of it:
+
== Guesswork, blood, and hacks.

----

== rails_console

Written by JosÃ© Valim, member of Rails core team.

Touches all parts of Rails. 

img/rails_console.png

----

== My bright idea

 ________________________________________
( Since this touches all parts of Rails, )
( it should be a great example, right?   )
 ----------------------------------------
 o     /\  ___  /\
  o   // \/   \/ \\
     ((    O O    ))
      \\ /     \ //
       \/  | |  \/ 
        |  | |  |  
        |  | |  |  
        |   o   |  
        | |   | |  
        |m|   |m|  
----

== Tears

----

== The first issue

~/Projects/railsconf_presentation/test3 [master] > rails server
=> Booting WEBrick
=> Rails 3.0.0 application starting on http://0.0.0.0:3000
Exiting
activesupport-3.0.0.beta3/lib/active_support/core_ext/module/
aliasing.rb:31:in `alias_method': undefined method 
`clean_backtrace' for class `Exception' (NameError)
+
Ok, so what happened to clean_backtrace?

----

== Investigation

In Rails 2.3.8, I found clean_backtrace as an extension to Exception 
in ActiveSupport.

I grepped for clean_backtrace in Rails 3: no dice.
+
How I found it:

  grep -ri backtrace acti* rail* | grep -i clean
+
It's a new class, ActiveSupport::BacktraceCleaner.
+
clean_backtrace cleaned the whole backtrace at once; BacktraceCleaner
does it line by line.

---- ruby

# In the plugin rails_footnotes:

module Footnotes::Extensions::Exception
  def self.included(base)
    base.class_eval do
      alias_method_chain :clean_backtrace, :links
    end
  end
  # ... 
  def clean_backtrace_with_links
    # ...
  end
end

Exception.send :include, Footnotes::Extensions::Exception

----

== The solution

I looked at BacktraceCleaner's code, and it has an add_filter method.
Bingo!

Now I need to add the code from Footnotes' clean_backtrace_with_links
into a block and pass it to add_filter.

---- ruby

# Here's one of those ActiveSupport hooks.
ActiveSupport.on_load(:after_initialize) do
  Rails.backtrace_cleaner.add_filter { |line|
    Footnotes::Backtracer.add_links_to_backtrace(line)
  }
end

# ...
module Backtracer
  def self.add_links_to_backtrace(line)
    unless ::Footnotes::Filter.prefix.blank? 
      expanded = line.gsub('#{RAILS_ROOT}', RAILS_ROOT)
      if match = expanded.match(/^(.+):(\d+):in/) || 
          match = expanded.match(/^(.+):(\d+)\s*$/)
        file = File.expand_path(match[1])
        line_number = match[2]
        html = %[<a href="#{Footnotes::Filter.prefix(file, line_number, 1)}">#{line}</a>]
      else
        clean_backtrace_without_links
        line
      end
    end
  end
end

----

== Problem solved! (kind of)

That error's not being thrown any more. Does the backtrace filter work?

I'm not sure. 

The lesson here is that sometimes you just have to get your plugin
to run before you get it to run right.

----

== So what next?

~/Projects/railsconf_presentation/test3 [master] > rails server
=> Booting WEBrick
=> Rails 3.0.0 application starting on http://0.0.0.0:3000
=> Call with -d to detach
=> Ctrl-C to shutdown server
Exiting
activerecord-3.0.0.beta3/lib/active_record/base.rb:1141:in 
`method_missing': undefined local variable or method 
`establish_connection' for ActiveRecord::Base:Class (NameError)
	from activerecord-3.0.0.beta3/lib/active_record/railtie.rb:49:in 
  `block (2 levels) in <class:Railtie>'

+
We all know ActiveRecord::Base has an establish_connection method.
That hasn't changed. So what's wrong?

---- ruby

# We have to make sure we don't call establish_connection until after
# initialization.

# in rails-footnotes/notes/queries_note.rb
# change this line:
Footnotes::Notes::QueriesNote.load

# to this:
ActiveSupport.on_load(:active_record) do
  Footnotes::Notes::QueriesNote.load
end

----

== Broken to running: 2 steps
+
Not bad, but nothing was showing up.

----

== Finding the silent killer

I'd like to say I used the Ruby debugger.
+
I should have used the Ruby debugger.
+
You should use the Ruby debugger.
+
Instead, I stuck "raise 'hello'" all up in this plugin until I found
what wasn't getting executed.

---- ruby

# in rails-footnotes/footnotes.rb
def valid?
  performed_render? && valid_format? && valid_content_type? &&
    @body.is_a?(String) && !component_request? && !xhr? &&
    !footnotes_disabled?
end
+
# This doesn't exist any more, so it returns nil.
def performed_render?
  @controller.instance_variable_get(:@performed_render)
end
+
# @template doesn't respond to template_format any more, so it
# throws a giant exception.
def valid_format?
  [:html,:rhtml,:xhtml,:rxhtml].include?(@template.template_format)
end

----

== Time to punt

What is this code actually doing?

performed_render? && valid_format? && valid_content_type? &&
    @body.is_a?(String) && !component_request? && !xhr? &&
    !footnotes_disabled?
+
It's preventing the footnotes from trying to output whenever:

* You haven't rendered.
* You're not rendering HTML.
* You're not sending an XHR.
* You've turned footnotes off.
+
Ok, whatever. Moving on. This can be fixed later.

---- ruby

def valid?
  true # STFU
end

----

== Ok, why isn't it showing up now?

Time to break out the raise.

---- ruby

# in lib/rails-footnotes/footnotes.rb

def initialize(controller)
  # ...
  @body = controller.response.body
end

def insert_text(position, pattern, new_text)
  index = case pattern
    when Regexp
      if match = @body.match(pattern)
        match.offset(0)[position == :before ? 0 : 1]
      else
        @body.size
      end
    else
      pattern
    end

  @body.insert index, new_text
end

----

== Not entirely sure what is going wrong

@body and controller.response.body reference the same String, and
insert changes the String, which is mutable, so I'm stumped.

However, if I reassign @body to controller.response.body, it works.

I am not going to argue with working code, even if it's mystifying.

----

== Working!
+
== But soon, disaster strikes
+
rails_footnotes is made up of separate notes, all subclasses from 
AbstractNote.

Some of them are having real problems:

* LayoutNote
* FiltersNote
* LogNote
* RoutesNote

Luckily, rails_footnotes has a configuration option to select notes.
I'm going to turn off problem ones.

---- center

And that gets me from completely broken to working.

You can find the working version at
http://github.com/crnixon/rails_footnotes.git

----

== LayoutNote

Let's fix this, and see what's changed about controllers and layouts.

LayoutNote is barfing because it calls a method called active_layout
on controller instances.

active_layout doesn't exist in Rails 3.

---- ruby

# The first error
# In this case, it's just checking to see that there is a layout.
#
def valid?
  prefix? && @controller.active_layout
end

# The second error
# This time, it's checking for the actual layout name.
#
def filename
  File.join(File.expand_path(RAILS_ROOT), 'app', 'layouts', "#{@controller.active_layout.to_s.underscore}").sub('/layouts/layouts/', '/views/layouts/')
end

---- ruby

# The first error
# ActionController::Base has a new method, action_has_layout?
# that we can use to check for the existence of the layout.
def valid?
  prefix? && @controller.action_has_layout?
end

# The second error
# I'm not so happy with this one. I had to call a private
# method called _layout to get the layout name.
def filename
  File.join(File.expand_path(RAILS_ROOT), 'app', 'layouts', "#{@controller.send(:_layout).to_s.underscore}").sub('/layouts/layouts/', '/views/layouts/')
end

----

== Is this OK?

I'm looking at the internals of Rails every day. Maybe I missed 
something, but I don't think there's another way to get the layout
name.
+
I've seen this "_method_name" convention a lot in Rails 3, and it's
obvious it's meant to say "This isn't part of the public API: don't
mess with it."
+
That's fine, but shouldn't there be a good way to see what our
controller is doing?

----

== FiltersNote

The same thing happened when fixing FiltersNote, but worse.
+
ActionController::Base used to handle its filtering system, and you 
could access the filters on a controller by calling filter_chain.
+
In Rails 3, filters have been pulled out to be handled by
ActiveSupport::Callbacks, which handles all callback-type activity
throughout Rails. This is pretty cool.
+
But I can't get my filter chain to see what filters will be called
for an action. To get it, I had to end up calling this:
+
== _process_action_callbacks

----

== Something is rotten in the state of Denmark
+
I left this project with some concerns. Many things that were 
available easily before are hidden now behind new abstractions
in ActiveSupport.
+
With that said, many plugins have been easily ported and Rails 3 is
a real improvement. I'm happy to be using it.

----
 ___________________________________
/ Thanks for listening to my tale!  \
|                                   |
| Questions?                        |
|                                   |
\ @crnixon clinton.nixon@viget.com  /
 -----------------------------------
  \
   \   \_\_    _/_/
    \      \__/
           (oo)\_______
           (__)\       )\/\
               ||----w |
               ||     ||

