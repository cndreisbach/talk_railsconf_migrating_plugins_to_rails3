---- config
# Basic config options.
title: Migrating Plugins to Rails 3
indent: 5
height: 25
width: 72
skip: 0

# The following options are for Gvim usage.
vim: gvim
gvimrc: |
  set guifont=Droid\ Sans\ Mono\ 20
  colorscheme default
  set nonumber

---- center
Migrating Plugins to Rails 3
or, A Tale of Woe

by Clinton R. Nixon
Viget Labs

----
== Projects used for examples

* Formtastic
* Typus
* rails_console

----
== First, the easy stuff

* Rake tasks
* Generators
* RAILS_* constants

----
== Rake tasks

Putting *.rake files in tasks/ has been deprecated.

Rake tasks go in lib/tasks/ now.

----
== Rake tasks and Railties

Rake tasks can also now be moved into a Railtie:

---- ruby,i4

module Typus
  class Railtie < ::Rails::Railtie
    rake_tasks do
      namespace :typus do
        desc "Install acts_as_list, acts_as_tree and paperclip."
        task :misc do
          # ...
        end
      end
    end
  end
end

----
== Generators

Like tasks, generators have moved from generators/ to lib/generators/.
+
Big changes:

* Rails 2: Rubigen
* Rails 3: Thor
+
Thor's Rails::Generators::Base replicates a lot of the old Rubigen
Rails::Generator::Base API.

---- ruby

# Rails 2 generator

class FormtasticGenerator < Rails::Generator::Base
  def manifest
    record do |m|
      m.directory File.join('config', 'initializers')
      m.template 'formtastic.rb',   
        File.join('config', 'initializers', 'formtastic.rb')
      m.directory File.join('public', 'stylesheets')
      m.template 'formtastic.css',   
        File.join('public', 'stylesheets', 'formtastic.css')
      m.template 'formtastic_changes.css',   
        File.join('public', 'stylesheets', 'formtastic_changes.css')
    end
  end
end

---- ruby

# Rails 3 generator

require 'rails/generators'

class FormtasticGenerator < Rails::Generators::Base
  def install_formtastic
    template File.join('config', 'initializers', 'formtastic.rb')
    template File.join('public', 'stylesheets', 'formtastic.css')
    template File.join('public', 'stylesheets', 'formtastic_changes.css')
  end
end

---- ruby

# Rails 2 generator with name and options

class FormGenerator < Rails::Generator::NamedBase
  default_options :haml => false,
                  :partial => false

  def initialize(runtime_args, runtime_options = {})
    base_name, @controller_class_path = extract_modules(@name.pluralize)
    # ...
  end

  def manifest
    record do |m|
      if options[:partial]
        # ...
      end
    end
  end
end

---- ruby

# Rails 3 generator with name and options

class FormGenerator < Rails::Generators::NamedBase
  class_option :haml, :type => :boolean, 
    :desc => 'Generate HAML instead of ERB.'
  class_option :partial, :type => :boolean, 
    :desc => 'Generate a form partial in the model views path, i.e. "_form.html.erb" or _form.html.haml".'
  class_option :controller, :type => :string, :banner => 'PATH', 
    :desc => 'Generate for custom controller/view path - in case model and controller namespace is different, i.e. "admin/posts".'

  def create_form 
    base_name, controller_class_path = extract_modules(name.pluralize)

    if options[:partial]
      # ... 
    end
  end
end

----

== RAILS_*

All the RAILS_* constants are now deprecated. 

Move to using the Rails object:

  * Rails.env
  * Rails.root

----

== Plugging in to Rails 3

---- ruby

# The Rails 2 way

ActionView::Base.send :include, Formtastic::SemanticFormHelper
ActionView::Base.send :include, Formtastic::LayoutHelper
+
# The Rails 3 way

ActiveSupport.on_load(:action_view) do
  include Formtastic::SemanticFormHelper
  include Formtastic::LayoutHelper
end

---- 

== ActiveSupport hooks

* before_configuration
* before_initialize
* before_eager_load
* after_initialize

* All the base classes: 
  * active_record
  * action_controller
  * action_view
  * action_mailer
  * i18n

You can execute whatever code you need to inside these.
The code will be executed in the context of ActiveWhatever::Base 
for the base classes.

----

== So that was the easy stuff.
+
== Now, for the rest of it:
+
== Guesswork, blood, and hacks.

----

== rails_console

Written by JosÃ© Valim, member of Rails core team.

Touches all parts of Rails. 

img/rails_console.png

----

== My bright idea

 ________________________________________
( Since this touches all parts of Rails, )
( it should be a great example, right?   )
 ----------------------------------------
 o     /\  ___  /\
  o   // \/   \/ \\
     ((    O O    ))
      \\ /     \ //
       \/  | |  \/ 
        |  | |  |  
        |  | |  |  
        |   o   |  
        | |   | |  
        |m|   |m|  
----

== Tears

----

== The first issue

~/Projects/railsconf_presentation/test3 [master] > rails server
=> Booting WEBrick
=> Rails 3.0.0 application starting on http://0.0.0.0:3000
Exiting
activesupport-3.0.0.beta3/lib/active_support/core_ext/module/
aliasing.rb:31:in `alias_method': undefined method 
`clean_backtrace' for class `Exception' (NameError)
+
Ok, so what happened to clean_backtrace?

----

== Investigation

In Rails 2.3.8, I found clean_backtrace as an extension to Exception 
in ActiveSupport.

I grepped for clean_backtrace in Rails 3: no dice.
+
How I found it:

  grep -ri backtrace acti* rail* | grep -i clean
+
It's a new class, ActiveSupport::BacktraceCleaner.
+
clean_backtrace cleaned the whole backtrace at once; BacktraceCleaner
does it line by line.

---- ruby

# In the plugin rails_footnotes:

module Footnotes::Extensions::Exception
  def self.included(base)
    base.class_eval do
      alias_method_chain :clean_backtrace, :links
    end
  end
  # ... 
  def clean_backtrace_with_links
    # ...
  end
end

Exception.send :include, Footnotes::Extensions::Exception

----

== The solution

I looked at BacktraceCleaner's code, and it has an add_filter method.
Bingo!

Now I need to add the code from Footnotes' clean_backtrace_with_links
into a block and pass it to add_filter.

---- ruby

# Here's one of those ActiveSupport hooks.
ActiveSupport.on_load(:after_initialize) do
  Rails.backtrace_cleaner.add_filter { |line|
    Footnotes::Backtracer.add_links_to_backtrace(line)
  }
end

# ...
module Backtracer
  def self.add_links_to_backtrace(line)
    unless ::Footnotes::Filter.prefix.blank? 
      expanded = line.gsub('#{RAILS_ROOT}', RAILS_ROOT)
      if match = expanded.match(/^(.+):(\d+):in/) || 
          match = expanded.match(/^(.+):(\d+)\s*$/)
        file = File.expand_path(match[1])
        line_number = match[2]
        html = %[<a href="#{Footnotes::Filter.prefix(file, line_number, 1)}">#{line}</a>]
      else
        clean_backtrace_without_links
        line
      end
    end
  end
end

----

== Problem solved! (kind of)

That error's not being thrown any more. Does the backtrace filter work?

I'm not sure. 

The lesson here is that sometimes you just have to get your plugin
to run before you get it to run right.

----

== So what next?

~/Projects/railsconf_presentation/test3 [master] > rails server
=> Booting WEBrick
=> Rails 3.0.0 application starting on http://0.0.0.0:3000
=> Call with -d to detach
=> Ctrl-C to shutdown server
Exiting
activerecord-3.0.0.beta3/lib/active_record/base.rb:1141:in 
`method_missing': undefined local variable or method 
`establish_connection' for ActiveRecord::Base:Class (NameError)
	from activerecord-3.0.0.beta3/lib/active_record/railtie.rb:49:in 
  `block (2 levels) in <class:Railtie>'

+
We all know ActiveRecord::Base has an establish_connection method.
That hasn't changed. So what's wrong?

---- ruby

# We have to make sure we don't call establish_connection until after
# initialization.

# in rails-footnotes/notes/queries_note.rb
# change this line:
Footnotes::Notes::QueriesNote.load

# to this:
ActiveSupport.on_load(:active_record) do
  Footnotes::Notes::QueriesNote.load
end

----

== Broken to running: 2 steps
+
Not bad, but nothing was showing up.

----

== Finding the silent killer

I'd like to say I used the Ruby debugger.
+
I should have used the Ruby debugger.
+
You should use the Ruby debugger.
+
Instead, I stuck "raise 'hello'" all up in this plugin until I found
what wasn't getting executed.
